1. Скрипт RunMe.js предназначен для компиляции и запуска различных исходных
файлов прямо из AkelPad.
При этом непосредственно компиляция или интерпретация исходного файла
производится внешним компилятором/интерпретатором.
Какой именно компилятор/интерпретатор вызывать для текущего файла,
определяется расширением этого файла и соответствующей этому расширению
командой, прописанной в наборе 'oCommands' (подробности ниже).
2. Также RunMe.js позволяет выполнять запуск файла, имя которого указано в
выделенном тексте (подробности ниже).
3. Вызов RunMe.js с параметром "1" позволяет модифицировать командную строку,
которая будет выполнена для запуска или компиляции файла. Это, в частности, 
позволяет указать дополнительные аргументы командной строки (подробности ниже).

1. Компиляция и запуск текущего файла
Скрипт RunMe.js состоит из двух логических частей: 
1) верхняя, пользовательская, часть - это набор 'oCommands', описывающий 
известные скрипту расширения файлов и что с ними делать. Сюда же относятся
пользовательские функции 'run_js', 'run_pas' и т.д. Предполагается, что
эту часть будет менять сам пользователь в зависимости от своих нужд, добавляя
новые расширения файлов и обработчики для них или же редактируя существующие.
2) нижняя, внутренняя, часть - это "движок" скрипта. Эту часть лучше не 
трогать. Изменения здесь могут понадобиться только в том случае, если вы 
хорошо разобрались, как скрипт работает в целом, и вам не хватает какого-то
вспомогательного функционала.
За компиляцию и запуск конкретных файлов отвечает пользовательская часть.
Для поддержки новых расширений файлов просто добавьте новый элемент в
набор 'oCommands' по аналогии с имеющимися.
Каждый элемент представляет собой пару "расширения" : "команда", где
расширения файлов перечисляются через пробел, а команда представляет собой
либо непосредственно командную строку, либо имя функции внутри RunMe.js,
которая будет вызвана для запуска/компиляции файлов с соответствующим
расширением. Вариант с функцией предусмотрен на тот случай, когда для запуска
файла нужно выполнить достаточно много действий - как пример, см. 'run_cpp'.
При добавлении новых элементов в 'oCommands' всегда оставляйте элемент
"" : ":run_anyfile(\"%f\")" самым последним в наборе.
При анализе расширения файла элементы в 'oCommands' просматриваются по
порядку, сверху вниз. Срабатывает первый из элементов, соответствующий
указанному расширению файла.

2. Запуск файла, указанного в выделенном тексте
Пример: набираем в редакторе "calc.exe", выделяем "calc.exe", запускаем
RunMe.js - и, вуаля, калькулятор перед нами.
Точно так же мы можем выделить и запустить .bat, .reg и прочие файлы по
их полному пути и расширению, например: "C:\Tools\SomeCommands.bat".
В выделенном тексте также поддерживаются %a, %d, %e, %f и %n, соответствующие
текущему файлу (если он сохранён).
Если выделенный текст не может быть распознан как имя файла, который можно
запустить, то RunMe.js работает в обычном режиме - пытается найти подходящую
команду для расширения физического файла.
Распознавание имени файла в выделенном тексте сделано очень просто:
1) выделенный текст не должен включать больше одной строки;
2) выделенный текст должен оканчиваться расширением файла, перечисленным
либо в 'oCommands', либо в 'isSupportedFileExtFromSelectedText'.
Фильтр по расширениям добавлен из соображений того, чтобы отсеять текст
общего вида, например "some text.other text" - который хотя и содержит
точку, но явно не представляет собой имя файла. (Возможно, в функции
'isSupportedFileExtFromSelectedText' вместо проверки конкретных расширений
следует сделать проверку на некоторое регулярное выражение.)

3. Запуск с модификацией командной строки
Иногда нам не достаточно просто запустить файл, как есть, - в особенности
если это скрипт, принимающий некоторые входные аргументы. Для этой цели в
RunMe.js предусмотрен режим модификации командной строки.
У себя я это настроил с помощью плагина Hotkeys:
1) Run  | Call("Scripts::Main", 1, "RunMe.js")      | Ctrl + F9
2) Run2 | Call("Scripts::Main", 1, "RunMe.js", "1") | Ctrl + Shift + F9
При нажатии Ctrl+Shift+F9 я вижу что-то вроде:
  Command:
  cmd /c python "%f" || pause
Когда мне нужны дополнительные аргументы, я их просто вписываю в эту строку.
Например:
  Command:
  cmd /c python "%f" 1 2 "Hello world!" || pause
При этом RunMe.js запоминает изменённую команду - и показывает её при
следующем нажатии Ctrl+Shift+F9.
При этом обычный запуск (Ctrl+F9) ориентируется сугубо на содержимое самого
RunMe.js, не подставляя изменённую команду.
В случае команд, выполняющихся путём вызова функции из RunMe.js, мы видим
несколько другое:
  Command:
  :run_js("%d", "%n.%e")
Для поддержки аргументов в пользовательские функции был специально добавлен
необязательный параметр 'args'. По умолчанию он не указан, но мы можем его
добавить:
  Command:
  :run_js("%d", "%n.%e", '1 2 "Hello world!" ')
Обратите внимание на использование одинарных кавычек для возможности передачи
двойных кавычек как части аргументов.
